import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("com.android.application")
    id("org.jetbrains.kotlin.android")
    id("kotlin-kapt")
    id("kotlin-parcelize")
    id("com.google.devtools.ksp")
    id ("dagger.hilt.android.plugin")
}

kotlin {
    sourceSets {
        debug {
            kotlin.srcDir("build/generated/ksp/debug/kotlin")
        }
        release {
            kotlin.srcDir("build/generated/ksp/release/kotlin")
        }
    }
}

android {
    compileSdk ProjectConfig.compileSdk

    defaultConfig {
        applicationId = ProjectConfig.appId
        minSdk = ProjectConfig.minSdk
        targetSdk = ProjectConfig.targetSdk
        versionCode = ProjectConfig.versionCode
        versionName = ProjectConfig.versionName

        testInstrumentationRunner = "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
    }

    buildFeatures {
        viewBinding = true
        compose = true
    }

    buildTypes {

        /* getByName("release") {
             isShrinkResources = false
             proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
         }*/
        release {
            minifyEnabled = false
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
        }
    }
    compileOptions {
        /*  coreLibraryDesugaringEnabled = true
          sourceCompatibility JavaVersion.VERSION_1_8
          targetCompatibility JavaVersion.VERSION_1_8*/
        sourceCompatibility = JavaVersion.VERSION_1_8
        sourceCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }

    tasks.withType(KotlinCompile).configureEach {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8

        kotlinOptions {
            jvmTarget = '1.8'
            apiVersion = '1.9'
            languageVersion = '1.9'
        }
    }

    composeOptions {
        kotlinCompilerExtensionVersion = Compose.Compose
    }
    packagingOptions {
        resources {
            excludes += ['/META-INF/AL2.0', '/META-INF/LGPL2.1']
        }
    }
    namespace = "com.ui"
}


dependencies {

//    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation(AndroidX.toolsDesugarJdkLibs)

//    implementation 'androidx.core:core-ktx:1.7.0'

    implementation(AndroidX.coreKtx)
//    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation(AndroidX.appCompat)
//    implementation 'com.google.android.material:material:1.4.0'
    implementation(AndroidX.material)


//    implementation "androidx.compose.ui:ui:$compose_version"
    implementation(Compose.ComposeUI)
//    implementation "androidx.compose.material:material:$compose_version"
    implementation(Compose.ComposeMaterial)
//    implementation "androidx.compose.ui:ui-tooling-preview:$compose_version"
    implementation(Compose.ComposeUiToolingPreview)
//    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation(Compose.RuntimeLifecycle)
//    implementation 'androidx.activity:activity-compose:1.3.1'
    implementation(Compose.ComposeActivityCompose)
    implementation(Compose.Annotation)

//    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation(ConstraintLayout.ConstraintLayout)
//    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation(Navigation.fragmentKtx)

//    implementation 'androidx.navigation:navigation-ui-ktx:2.3.5'
    implementation(Navigation.uiKtx)
//    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'
    implementation(LiveData.LiveDataLib)
//    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    implementation(Lifecycle.lifecycleViewModelKtx)
//    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.5'
    implementation(Navigation.fragmentKtx)
    implementation 'de.hdodenhof:circleimageview:3.1.0'

    // implementation 'com.eightbitlab:blurview:1.6.6'

//    implementation 'com.github.bumptech.glide:glide:4.11.0'
    implementation(Glide.glide)
//    implementation 'com.google.android.gms:play-services-maps:17.0.1'
    implementation(GoogleMap.INSTANCE.googleMapsService)


    implementation(Glide.compiler)
//    implementation "androidx.compose.foundation:foundation:$compose_version"
    implementation(Compose.ComposeFoundation)
//    implementation 'androidx.activity:activity-compose:1.4.0'
    implementation(Compose.ComposeActivityCompose)
//    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    implementation(Compose.UiTestJunit)

//    kapt 'com.github.bumptech.glide:compiler:4.11.0'
    kapt(Glide.compiler)

    // Material design icons
//    implementation 'androidx.compose.material:material-icons-core:1.1.1'
    implementation(MaterialDesign.materialIcons)
//    implementation 'androidx.compose.material:material-icons-extended:1.1.1'
    implementation(MaterialDesign.materialIconsExtended)


    // Compose dependencies
//    implementation "androidx.lifecycle:lifecycle-viewmodel-compose:2.4.1"
    implementation(Compose.ComposeViewModel)
//    implementation "androidx.navigation:navigation-compose:2.5.0-alpha02"
    implementation(Compose.ComposeNavigation)
//    implementation "com.google.accompanist:accompanist-flowlayout:0.17.0"
    implementation(Compose.ComposeFlowLayout)


//    implementation 'androidx.viewpager2:viewpager2:1.0.0'
    implementation(ViewPager.ViewPager)
//    implementation 'com.google.mlkit:barcode-scanning:16.1.2'
    implementation(MLkit.INSTANCE.mlKitBarcodeScanning)

    /*  // CameraX core library using the camera2 implementation
      implementation"androidx.camera:camera-camera2:1.1.0-beta02"
      implementation"androidx.camera:camera-view:1.1.0-beta02"
      implementation"androidx.camera:camera-lifecycle:1.0.2"
      implementation "androidx.camera:camera-extensions:1.0.0-alpha08"*/


    // CameraX
//    def camerax_version = "1.0.1"
//    implementation "androidx.camera:camera-camera2:$camerax_version"
    implementation(CameraX.cameraXCamera2)
//    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    implementation(CameraX.cameraXLifecycle)
//    implementation "androidx.camera:camera-view:1.1.0-beta02"
    implementation(CameraX.camerView)

//    implementation "androidx.camera:camera-extensions:1.1.0-beta02"
    implementation(CameraX.cameraExtensions)


//    /*def camerax_version = "1.0.1"

//    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to use the CameraX View class
//    implementation "androidx.camera:camera-view:1.0.0-alpha08"
    // If you want to use the CameraX Extensions library
//    implementation "androidx.camera:camera-extensions:1.0.0-alpha08"*/
    // If you want to use the CameraX Lifecycle library
//    implementation "androidx.camera:camera-lifecycle:${camerax_version}"


//    testImplementation 'junit:junit:4.+'
    testImplementation(JUnit.INSTANCE.JUnitLibrary)
//    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation(JUnit.INSTANCE.JUnitTestLibrary)
//    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
    androidTestImplementation(JUnit.INSTANCE.espressoLibrary)
//    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
//    debugImplementation "androidx.compose.ui:ui-tooling:$compose_version"
    debugImplementation(Compose.ComposeTooling)


    // Accompanist
//    implementation "io.coil-kt:coil-compose:1.3.2"
    implementation(Coil.INSTANCE.CoilComposeLibrary)


    // Coroutines
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1'
    implementation(Coroutines.CoroutineCore)
//    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1'
    implementation(Coroutines.CoroutineAndroid)

    // Lifecycle
//    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation(Lifecycle.lifecycleViewModelKtx)

    //Dagger - Hilt
//    implementation "com.google.dagger:hilt-android:2.40"
    implementation(DaggerHilt.HiltAndroid)

//    kapt "com.google.dagger:hilt-android-compiler:2.40"
    kapt(DaggerHilt.HiltAndroidCompiler)

//    implementation "androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha03"
//    implementation(DaggerHilt.INSTANCE.hiltLifecycleViewModel)

//    kapt "androidx.hilt:hilt-compiler:1.0.0"
    kapt(DaggerHilt.HiltCompilerLibrary)

//    implementation 'androidx.hilt:hilt-navigation-compose:1.0.0'
    implementation(DaggerHilt.HiltNavigationCompose)

    // Retrofit
    implementation(Retrofit.INSTANCE.retrofitTwo)

//    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    implementation(Retrofit.INSTANCE.retrofitGSONConvertor)
    implementation(Retrofit.INSTANCE.okHttpLoggingInterceptor)
    implementation(Retrofit.INSTANCE.moshiConverter)



//    implementation "com.squareup.okhttp3:okhttp:5.0.0-alpha.2"
    implementation(Retrofit.INSTANCE.okHttpLibrary)

    // Compose Nav Destinations
//    implementation 'io.github.raamcosta.compose-destinations:core:1.1.2-beta'
    implementation(ComposeNavDestination.INSTANCE.destinationCore)

    ksp 'io.github.raamcosta.compose-destinations:ksp:1.1.2-beta'
    ksp(ComposeNavDestination.INSTANCE.destinationKSP)


    /*Lottie Animation*/
//    implementation "com.airbnb.android:lottie-compose:$lottieVersion"
    implementation(LottieAnimation.INSTANCE.lottieLibrary)

    /*Coil for image processing in kotlin */
//    implementation("io.coil-kt:coil-compose:2.0.0-rc02")
    implementation(Coil.INSTANCE.coilComposeLibrary)
//    implementation("io.coil-kt:coil-gif:2.0.0-rc02")
    implementation(Coil.INSTANCE.coilGIF)
//    implementation("io.coil-kt:coil:2.0.0-rc02")
    implementation(Coil.INSTANCE.coilKT)


    /** Library for permission in android
     * https://google.github.io/accompanist/permissions/
     * */
//    implementation "com.google.accompanist:accompanist-permissions:0.24.6-alpha"
    implementation(AccompaintsPermission.INSTANCE.accompaintsPermission)


    /* // Zxing
     implementation 'com.google.zxing:core:3.4.1'

     // Activity Compose
     implementation "androidx.activity:activity-compose:1.4.0"*/


    //   barcode - scanning ML- kit
    // Use this dependency to bundle the model with your app
//    implementation 'com.google.mlkit:barcode-scanning:17.0.2'
    implementation(MLkit.INSTANCE.mlKitBarcodeScanning)

    /* Google Map
    url - https://developers.google.com/maps/documentation/android-sdk/maps-compose
    */

//    implementation "com.google.maps.android:maps-compose:2.2.0"
    implementation(GoogleMap.INSTANCE.googleMaps)

//    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation(GoogleMap.INSTANCE.googleMapsService)


/*Constraint Layouts*/
//    implementation "androidx.constraintlayout:constraintlayout-compose:1.1.0-alpha03"
    implementation(ConstraintLayout.INSTANCE.constraintLayoutCompose)

//    def work_version = "2.7.1"
    // Kotlin + coroutines
//    implementation "androidx.work:work-runtime-ktx:$work_version"
    implementation(WorkManger.INSTANCE.workManager)



    implementation(DaggerHilt.HiltWorkLibrary)
    kapt (DaggerHilt.HiltCompilerLibrary)
    kapt (DaggerHilt.HiltAndroidCompiler)



    implementation (Room.RoomRuntime)
    annotationProcessor (Room.RoomCompiler)

    implementation (WorkManger.INSTANCE.workManager)

    // To use Kotlin annotation processing tool (kapt)
    kapt (Room.RoomCompiler)
    implementation (Room.RoomKTX)


//    implementation project(':core')
/*    implementation(project(Modules.coreModule))


//    implementation project(':core_ui')
    implementation(project(Modules.coreUiModule))
*/



}